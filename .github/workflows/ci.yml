# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms


on: [push, workflow_dispatch,release]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, msvc]
        include:
          - os: windows-latest
            c_compiler: msvc
            cpp_compiler: msvc
            CMAKE_GENERATOR: "Visual Studio 17 2022"
            # mingw
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
            CMAKE_GENERATOR: "MinGW Makefiles"
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
            CMAKE_GENERATOR: "Unix Makefiles"

          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            CMAKE_GENERATOR: "Unix Makefiles"
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            CMAKE_GENERATOR: "Unix Makefiles"
            # exclude 部分排除了不兼容的组合：
            # 不允许在 windows-latest 上使用 gcc 或 clang 编译器
            # 不允许在 ubuntu-latest 上使用 cl 编译器
        exclude:
          # - os: windows-latest
          #   c_compiler: gcc
          # - os: windows-latest
          #   c_compiler: clang
          - os: ubuntu-latest
            c_compiler: msvc
        CPACK_GENERATOR:
          - ZIP


    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        -G '${{ matrix.CMAKE_GENERATOR }}'

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} 

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Linux executable
        # 消除警告
        if-no-files-found: ignore
        overwrite: true
        path: |
          ${{ steps.strings.outputs.build-output-dir }}/HelloWorld

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Windows executable
        # 消除警告
        if-no-files-found: ignore
        overwrite: true
        path: |
          # msvc
          ${{ steps.strings.outputs.build-output-dir }}/Release/HelloWorld.exe

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        name: Linux executable
        path: |
          ${{ github.workspace }}/HelloWorld
    - name: Zip Files
      run: zip -r -f windows-x64.zip ${{ steps.strings.outputs.build-output-dir }}/Release/
      run: zip -r -f linux.zip ${{ steps.strings.outputs.build-output-dir }}/HelloWorld

    # 默认下载所有工件
    - name: Download Artifacts
      uses: actions/download-artifact@v4

    - name: Publish Tagged Release
      uses: softprops/action-gh-release@v2
      if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.CPACK_GENERATOR != '' }}
      with:
        files: |
          ${{ steps.strings.outputs.build-output-dir }}/Release/HelloWorld.exe
          ${{ steps.strings.outputs.build-output-dir }}/HelloWorld
